(def bass-start start)

(defn start [thunk name sha repo inst-id app-id key]
  (let [{:id run-id} (create-check name sha repo inst-id app-id key
                                   :status "in_progress"
                                   :started-at (now 0))]
    (bass-start thunk
      (fn [ok?]
        (update-check run-id repo inst-id app-id key
                      :status "completed"
                      :conclusion (if ok? "success" "failure")
                      :completed-at (now 0))))
    true))

(def gh-app
  (-> ($ go build -o ../exe ./)
      (with-env {:CGO_ENABLED "0"})
      (with-mount *dir*/gh-app/ ./src/)
      (with-dir ./src/)
      (with-image (linux/golang))
      (subpath ./exe)))

(defn create-check [name sha repo inst-id app-id key & kwargs]
  (logf "running check %s for repo %s @ %s" name repo sha)
  (-> ($ $gh-app -a (str app-id) -i (str inst-id) -p /private-key
         -X POST (str "repos/" repo "/check-runs"))
      (with-image (linux/alpine))
      (with-mount key /private-key)
      (with-stdin [(apply assoc (cons {:name name :head-sha sha} kwargs))])
      (read :json)
      next))

(defn update-check [run-id repo inst-id app-id key & kwargs]
  (logf "updating check run %s with %s" run-id kwargs)
  (-> ($ $gh-app -a (str app-id) -i (str inst-id) -p /private-key
         -X PATCH (str "repos/" repo "/check-runs/" run-id))
      (with-image (linux/alpine))
      (with-mount key /private-key)
      (with-stdin [(list->scope kwargs)])
      (read :json)
      next))
