; location to track dependency resolution
(def *memos*
  *dir*/project.lock)

; load dependencies
(use (.strings)
     (.git (linux/alpine/git))
     (git:github/vito/tabs/ref/main/nix))

; clones the repo and checks out the given sha
(defn checkout [sha]
  (git:github/vito/bass/sha/ sha))

(defn ls [path]
  (-> ($ ls -al $path)
      (with-image (linux/alpine))
      run))

(defn checks [src]
  {:build-linux-amd64 (ls (build src "dev" "linux" "amd64"))
   :build-darwin-amd64 (ls (build src "dev" "darwin" "amd64"))
   :build-darwin-arm64 (ls (build src "dev" "darwin" "arm64"))
   :build-windows-amd64 (ls (build src "dev" "windows" "amd64"))
   :docs (ls (docs src))
   :test (tests src ["./..."])
   :nix (nix-checks src)})

; monolithic image containing dependencies for building and testing
(defn deps [src]
  {:file (nix:result
           (-> ($ nix build ".#depsOci")
               (with-mount src/nix/ ./nix/)
               (with-mount src/flake.nix ./flake.nix)
               (with-mount src/flake.lock ./flake.lock)
               (with-mount src/default.nix ./default.nix))
           ./image.tar)
   :platform {:os "linux"}
   :tag "latest"})

; deps with Go dependencies pre-fetched
(defn deps+go [src]
  (from (deps src)
    ($ cp src/go.mod src/go.sum ./)
    ($ go mod download)))

(provide [build smoke-test tests docs]
  ; compiles a bass binary for the given platform and puts it in an archive
  (defn build [src version os arch]
    (let [staged (from (make-shims src)
                   ($ make
                      (str "VERSION=" version)
                      (str "GOOS=" os)
                      (str "GOARCH=" arch)
                      "DESTDIR=./dist/"
                      install))]
      (archive src staged/dist/ os arch)))

  ; returns a thunk with the make targets built into the output directory, as
  ; an overlay of src
  (defn make-shims [src]
    (-> ($ make -j shims)
        (with-mount src ./)
        (with-image (deps+go src))))

  ; creates an archive appropriate for the given platform
  (defn archive [src out os arch]
    (let [prefix (str "bass." os "-" arch)
          tgz-path (string->fs-path (str prefix ".tgz"))
          zip-path (string->fs-path (str prefix ".zip"))]
      (if (= os "windows")
        (zip src zip-path out ./bass)
        (tar-czf src tgz-path out ./bass))))

  (defn tar-czf [src tarname dir & files]
    (-> ($ tar -C $dir -czf $tarname & $files)
        (with-image (deps+go src))
        (subpath tarname)))

  (defn zip [src zipname dir & files]
    (-> ($ zip (../ zipname) & $files)
        (with-image (deps+go src))
        (with-mount dir ./content/)
        (with-dir ./content/)
        (subpath zipname)))

  ; runs a quick sanity check
  (defn check-dist [dist image]
    (let [unpacked (from image
                     ($ tar -zxf $dist))]
      (run (from unpacked
             ($ ./bass --version)))
      (if (succeeds? (from unpacked
                       ($ ldd ./bass)))
        (error "binary is not statically linked")
        :ok)))

  ; images to test the binary against
  (def smoke-tests
    [(linux/ubuntu)
     (linux/alpine)])

  ; runs a basic sanity check, ensuring the binary runs in a handful of
  ; platforms
  ;
  ; in reality this only checks the Linux binary since there are no
  ; Windows/Darwin runtimes yet
  (defn smoke-test [dist]
    (map (fn [image] (check-dist dist image))
         smoke-tests))

  (defn with-deps [src test-thunk]
    (-> test-thunk
        (wrap-cmd ./hack/with-deps) ; TODO: maybe swap the order here
        (with-image (make-shims src))
        ; runtime tests currently need elevated privileges
        insecure!))

  ; returns a directory containing the built docs HTML
  (defn docs [src]
    (subpath
      (with-deps src
        ($ ./docs/scripts/build))
      ./docs/))

  ; returns a thunk that will run the tests and return cover.html
  (defn tests [src testflags]
    (from (with-deps src
            ($ gotestsum --format testname --no-color=false --jsonfile ./tests.log
               --
               -cover
               -coverprofile ./cover.out
               -covermode count
               & $testflags))

      ; report slow tests
      ($ gotestsum tool slowest --jsonfile ./tests.log --threshold "500ms")

      ; generate coverage report
      ($ go tool cover -html ./cover.out -o ./cover.html))))

; checks that the nix flake + build can run successfully
(defn nix-checks [src]
  (from nix:image
    (cd src
      (nix:with-cache ($ nix flake metadata))
      (nix:with-cache ($ nix flake check))
      (nix:with-cache ($ nix build)))))

(provide [release-notes]
  ; undoes line wrapping in a given file
  ;
  ; GitHub releases, for whatever reason, respect word wrapping in the release
  ; body which makes it look pretty hideous on the desktop.
  ;
  ; Returns a memory-backed file, so this can be shimmed in-place.
  (defn undo-wordwrap [src file]
    (mkfile ./wide.txt
      (-> ($ markdownfmt $file)
          (with-image (deps+go src))
          (read :raw)
          next)))

  ; returns the path to the release notes for the given version
  (defn release-notes [src version]
    (let [notes (string->fs-path (str version ".md"))]
      (undo-wordwrap src (src/notes/ notes)))))

(provide [release]
  (use (git:github/vito/tabs/ref/main/gh))

  ; returns the github release module
  (defn release [token]
    (gh:release "vito/bass" token)))
